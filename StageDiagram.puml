@startuml
title Bridge-Alien Stage System Architecture

skinparam classAttributeIconSize 0

package "UI Layer" {

    class UIStagePopup {
        + Init()
        ' 스테이지 초기화
        + InitStageButtonGroup() 
        + SetStageInfo(stageData: StageData)
        + OnClickStageStartButton()
    }

    class UIStageButtonGroup{

    }

    class UIStageButton {
        - _stageType: Define.StageType
        + OnClickButton()
    }

    class UIStageStarGroup{

    }
}

package "Management Layer" {
    class SceneManagerEx {
        + ChanageScene(sceneType : Defein.SceneType)
    }

    class StageManager {
        - _currentStage: StageData
        + OnChangeStage: Action<StageData>
        --
        + Init()
        + SetCurrentStage(stageData: StageData)
        + LoadStage(stageType: Define.StageType)
        + CompleteStage(stageType: Define.StageType, playerScore: int): int
        + CheckStageLockStatus(stageType: Define.StageType): bool
    }

    class PlayerManager {
        + PlayerData PlayerData
        --
        + SaveStageProgress(stageType: Define.StageType, starCount: int)
        + GetTotalStars(): int
    }
    
    class DataManager {
      + StageData: StageDataSO
    }
}

package "Data Layer" {
    class PlayerData {
        + ClearedStages: Dictionary<Define.StageType, int>
        + totalStars: int
    }

    class StageDataSO <<ScriptableObject>> {
        + StageDic: Dictionary<Define.StageType, StageData>
    }

    class StageData {
        + StageName: string
        + IsLocked: bool
        + requiredStars: int
        + ClearReward: int
        + ClearScoreList: int[]
    }
}

package "Stage Editor Layer"{
    class StageEditor{
        - stageDataSO: StageDataSO
        - selectedStageType: Define.StageType
        - loadedPrefab: GameObject
        --
        + ShowWindow()
        - OnGUI()
        - DrawStageDetails(stageType: Define.StageType)
        - LoadStagePrefab(stageName: string)
        - SaveGameSettings()
    }
}

' --- Relationships ---

' Data Dependencies
PlayerManager o-- PlayerData
DataManager o-- StageDataSO
StageDataSO "1" o-- "0..*" StageData

' Inter-Manager Dependencies
' StageManager needs data from other managers
StageManager ..> DataManager : Reads stage data
StageManager ..> PlayerManager : Reads or Update player progress

' UI to Manager Dependencies
UIStagePopup ..> SceneManagerEx : Change Scene
UIStageButton ..> StageManager : Update Selected Stage
UIStageButtonGroup o-- UIStagePopup
UIStageStarGroup o-- UIStagePopup

' Event-based/Callback Dependencies
UIStagePopup <.. StageManager : Subscribes to OnChangeStage

' Stage Editor Dependecies
StageEditor o-- StageDataSO : Stage Data

@enduml
